// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: HospitalService/HospitalService.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HospitalService_SendMessage_FullMethodName          = "/hospital.HospitalService/SendMessage"
	HospitalService_GetClients_FullMethodName           = "/hospital.HospitalService/GetClients"
	HospitalService_GetActiveConnections_FullMethodName = "/hospital.HospitalService/GetActiveConnections"
	HospitalService_GetClientIDs_FullMethodName         = "/hospital.HospitalService/GetClientIDs"
)

// HospitalServiceClient is the client API for HospitalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HospitalServiceClient interface {
	SendMessage(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*MessageRes, error)
	GetClients(ctx context.Context, in *GetClientsReq, opts ...grpc.CallOption) (*ClientListRes, error)
	GetActiveConnections(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ClientListRes, error)
	GetClientIDs(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*ClientListRes, error)
}

type hospitalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHospitalServiceClient(cc grpc.ClientConnInterface) HospitalServiceClient {
	return &hospitalServiceClient{cc}
}

func (c *hospitalServiceClient) SendMessage(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*MessageRes, error) {
	out := new(MessageRes)
	err := c.cc.Invoke(ctx, HospitalService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalServiceClient) GetClients(ctx context.Context, in *GetClientsReq, opts ...grpc.CallOption) (*ClientListRes, error) {
	out := new(ClientListRes)
	err := c.cc.Invoke(ctx, HospitalService_GetClients_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalServiceClient) GetActiveConnections(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*ClientListRes, error) {
	out := new(ClientListRes)
	err := c.cc.Invoke(ctx, HospitalService_GetActiveConnections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospitalServiceClient) GetClientIDs(ctx context.Context, in *MessageReq, opts ...grpc.CallOption) (*ClientListRes, error) {
	out := new(ClientListRes)
	err := c.cc.Invoke(ctx, HospitalService_GetClientIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HospitalServiceServer is the server API for HospitalService service.
// All implementations must embed UnimplementedHospitalServiceServer
// for forward compatibility
type HospitalServiceServer interface {
	SendMessage(context.Context, *MessageReq) (*MessageRes, error)
	GetClients(context.Context, *GetClientsReq) (*ClientListRes, error)
	GetActiveConnections(context.Context, *EmptyReq) (*ClientListRes, error)
	GetClientIDs(context.Context, *MessageReq) (*ClientListRes, error)
	mustEmbedUnimplementedHospitalServiceServer()
}

// UnimplementedHospitalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHospitalServiceServer struct {
}

func (UnimplementedHospitalServiceServer) SendMessage(context.Context, *MessageReq) (*MessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedHospitalServiceServer) GetClients(context.Context, *GetClientsReq) (*ClientListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClients not implemented")
}
func (UnimplementedHospitalServiceServer) GetActiveConnections(context.Context, *EmptyReq) (*ClientListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveConnections not implemented")
}
func (UnimplementedHospitalServiceServer) GetClientIDs(context.Context, *MessageReq) (*ClientListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientIDs not implemented")
}
func (UnimplementedHospitalServiceServer) mustEmbedUnimplementedHospitalServiceServer() {}

// UnsafeHospitalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HospitalServiceServer will
// result in compilation errors.
type UnsafeHospitalServiceServer interface {
	mustEmbedUnimplementedHospitalServiceServer()
}

func RegisterHospitalServiceServer(s grpc.ServiceRegistrar, srv HospitalServiceServer) {
	s.RegisterService(&HospitalService_ServiceDesc, srv)
}

func _HospitalService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).SendMessage(ctx, req.(*MessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalService_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_GetClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).GetClients(ctx, req.(*GetClientsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalService_GetActiveConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).GetActiveConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_GetActiveConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).GetActiveConnections(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospitalService_GetClientIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospitalServiceServer).GetClientIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospitalService_GetClientIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospitalServiceServer).GetClientIDs(ctx, req.(*MessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HospitalService_ServiceDesc is the grpc.ServiceDesc for HospitalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HospitalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hospital.HospitalService",
	HandlerType: (*HospitalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _HospitalService_SendMessage_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _HospitalService_GetClients_Handler,
		},
		{
			MethodName: "GetActiveConnections",
			Handler:    _HospitalService_GetActiveConnections_Handler,
		},
		{
			MethodName: "GetClientIDs",
			Handler:    _HospitalService_GetClientIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "HospitalService/HospitalService.proto",
}
