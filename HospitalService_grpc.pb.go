// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: HospitalService/HospitalService.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Client_Ping_FullMethodName        = "/HospitalService.Client/ping"
	Client_SendMessage_FullMethodName = "/HospitalService.Client/SendMessage"
)

// ClientClient is the client API for Client service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientClient interface {
	Ping(ctx context.Context, in *ClientConnect, opts ...grpc.CallOption) (*ClientResponse, error)
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type clientClient struct {
	cc grpc.ClientConnInterface
}

func NewClientClient(cc grpc.ClientConnInterface) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) Ping(ctx context.Context, in *ClientConnect, opts ...grpc.CallOption) (*ClientResponse, error) {
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, Client_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, Client_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServer is the server API for Client service.
// All implementations must embed UnimplementedClientServer
// for forward compatibility
type ClientServer interface {
	Ping(context.Context, *ClientConnect) (*ClientResponse, error)
	SendMessage(context.Context, *Message) (*EmptyMessage, error)
	mustEmbedUnimplementedClientServer()
}

// UnimplementedClientServer must be embedded to have forward compatible implementations.
type UnimplementedClientServer struct {
}

func (UnimplementedClientServer) Ping(context.Context, *ClientConnect) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedClientServer) SendMessage(context.Context, *Message) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedClientServer) mustEmbedUnimplementedClientServer() {}

// UnsafeClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServer will
// result in compilation errors.
type UnsafeClientServer interface {
	mustEmbedUnimplementedClientServer()
}

func RegisterClientServer(s grpc.ServiceRegistrar, srv ClientServer) {
	s.RegisterService(&Client_ServiceDesc, srv)
}

func _Client_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientConnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Client_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Ping(ctx, req.(*ClientConnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Client_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// Client_ServiceDesc is the grpc.ServiceDesc for Client service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Client_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HospitalService.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ping",
			Handler:    _Client_Ping_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Client_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "HospitalService/HospitalService.proto",
}

const (
	Hospital_Server_NewConnection_FullMethodName   = "/HospitalService.Hospital_Server/NewConnection"
	Hospital_Server_CloseConnection_FullMethodName = "/HospitalService.Hospital_Server/CloseConnection"
)

// Hospital_ServerClient is the client API for Hospital_Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Hospital_ServerClient interface {
	NewConnection(ctx context.Context, in *ClientConnect, opts ...grpc.CallOption) (*ClientResponse, error)
	CloseConnection(ctx context.Context, in *ClientDisconnect, opts ...grpc.CallOption) (*ServerResponse, error)
}

type hospital_ServerClient struct {
	cc grpc.ClientConnInterface
}

func NewHospital_ServerClient(cc grpc.ClientConnInterface) Hospital_ServerClient {
	return &hospital_ServerClient{cc}
}

func (c *hospital_ServerClient) NewConnection(ctx context.Context, in *ClientConnect, opts ...grpc.CallOption) (*ClientResponse, error) {
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, Hospital_Server_NewConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospital_ServerClient) CloseConnection(ctx context.Context, in *ClientDisconnect, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, Hospital_Server_CloseConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Hospital_ServerServer is the server API for Hospital_Server service.
// All implementations must embed UnimplementedHospital_ServerServer
// for forward compatibility
type Hospital_ServerServer interface {
	NewConnection(context.Context, *ClientConnect) (*ClientResponse, error)
	CloseConnection(context.Context, *ClientDisconnect) (*ServerResponse, error)
	mustEmbedUnimplementedHospital_ServerServer()
}

// UnimplementedHospital_ServerServer must be embedded to have forward compatible implementations.
type UnimplementedHospital_ServerServer struct {
}

func (UnimplementedHospital_ServerServer) NewConnection(context.Context, *ClientConnect) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewConnection not implemented")
}
func (UnimplementedHospital_ServerServer) CloseConnection(context.Context, *ClientDisconnect) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseConnection not implemented")
}
func (UnimplementedHospital_ServerServer) mustEmbedUnimplementedHospital_ServerServer() {}

// UnsafeHospital_ServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Hospital_ServerServer will
// result in compilation errors.
type UnsafeHospital_ServerServer interface {
	mustEmbedUnimplementedHospital_ServerServer()
}

func RegisterHospital_ServerServer(s grpc.ServiceRegistrar, srv Hospital_ServerServer) {
	s.RegisterService(&Hospital_Server_ServiceDesc, srv)
}

func _Hospital_Server_NewConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientConnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Hospital_ServerServer).NewConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hospital_Server_NewConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Hospital_ServerServer).NewConnection(ctx, req.(*ClientConnect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hospital_Server_CloseConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientDisconnect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Hospital_ServerServer).CloseConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hospital_Server_CloseConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Hospital_ServerServer).CloseConnection(ctx, req.(*ClientDisconnect))
	}
	return interceptor(ctx, in, info, handler)
}

// Hospital_Server_ServiceDesc is the grpc.ServiceDesc for Hospital_Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hospital_Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HospitalService.Hospital_Server",
	HandlerType: (*Hospital_ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewConnection",
			Handler:    _Hospital_Server_NewConnection_Handler,
		},
		{
			MethodName: "CloseConnection",
			Handler:    _Hospital_Server_CloseConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "HospitalService/HospitalService.proto",
}
