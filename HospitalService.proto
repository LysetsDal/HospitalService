syntax = "proto3";

option go_package = "github.com/LysetsDal/HospitalService/proto";

/*
protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative HospitalService.proto
*/

// HOSPITAL SERVER INTERFACE
service HospitalService {
    rpc RegisterClient(RegisterReq) returns (RegisterRes) {}
    rpc GetClients(MessageReq) returns (ClientIDsList) {}
    rpc SendMessageToServer(MessageReq) returns (MessageRes) {}
    rpc SendSecretToServer(ShareSecretRes) returns (MessageRes) {}
}

service ClientService {
    rpc SendMessageToPeer(MessageReq) returns (MessageRes) {}
    rpc ShareSecret(ShareSecretReq) returns (ShareSecretRes) {}
    rpc SendShareToPeer(ShareMessage) returns (EmptyReq) {}
}

message MessageReq {
    string from = 1;
    optional string targetID = 2;
    string payload = 3;
}

message EmptyReq {}

message MessageRes {
    string res = 1;
}

message GetClientsReq {
    string request = 1;
}

message ClientListRes {
    repeated string clients = 1;
}

message ClientIDsList {
    repeated string uuids = 1;
}

message RegisterReq {
    string uuid = 1;
    string listenAddr = 2;
}

message RegisterRes {
    bool success = 1;
}

// Messages for secret sharing
message ShareSecretReq {
    int32 secret = 1;
    int32 num_shares = 2;  // The number of shares to split the secret into.
}

message ShareSecretRes {
    repeated int32 shares = 1;
    string error_message = 2;  // Populated if there's an error.
}

message ShareMessage {
    string from = 1;
    optional string targetID = 2;
    int32 payload = 3;
}